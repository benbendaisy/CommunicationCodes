import collections


class Solution:
    def longestValidParentheses1(self, s: str) -> int:
        if not s:
            return 0
        def isValid(str1: str) -> bool:
            stack = collections.deque()
            idx = 0
            while idx < len(str1):
                if str1[idx] == ")":
                    if stack:
                        stack.pop()
                    else:
                        return False
                else:
                    stack.append(str1[idx])
                idx += 1
            return not stack
        maxCnt = 0
        for i in range(len(s)):
            for j in range(i + 2, len(s) + 1, 2):
                if isValid(s[i : j]):
                    maxCnt = max(maxCnt, j - i)
        return maxCnt

    def longestValidParentheses(self, s: str) -> int:
        if not s:
            return 0
        stack = collections.deque()
        maxLen = 0
        stack.append(-1)
        for i in range(len(s)):
            if s[i] == "(":
                stack.append(i)
            else:
                stack.pop()
                if not stack:
                    stack.append(i)
                else:
                    maxLen = max(maxLen, i - stack[-1])
        return maxLen



if __name__ == "__main__":
    s = "())()()(())((()(()()(((()))((((())((()(())()())(()" \
        "((((()))()(()))(())()(())(()(((((())((((((()())())" \
        "(()(()((())()))(()))))))()(()))((((())()()()))()()()" \
        "(((()(()())(()()(()(()()(((()))))))()()))())())((()" \
        "()))))))((()))(((()((())()(()()))((())))()()())))))))" \
        "()))))(()))))()))()))()((())))((()))(()))))))(((()))))))))" \
        "()(()()()(())((())()))()()(())))()()))(()())()))(((()())()))" \
        "((())((((()))(()(()(()()()(((())()(((((()))((()(((((())" \
        "(()()))((((((((()(()(()(()(())))(())(()())())(()((((()(())" \
        "((()(())))(())))()(((((()(()()(())))))))())(())(())(()()(((())))" \
        "((()))(((((()))))())))()((()))()))))())))))((())(((((()()))" \
        "((((())))(((()(()(())())(((()(()(()()()())))())()))((()((())" \
        "())()()()(((())(((((()((((((()((()())))((((())((()(((((((()(()" \
        "((()()()(()(()())(()(()()((((())))()(((()())))(()()))()(()()()" \
        "()(((((())(()))))((()))())))()((((((()))())))()(()))(())))((((()())" \
        "(((((()()())(((((())(()())(()))))()(()()))()))))))())))(((())(()(()()))" \
        "(()))()(((())))())((((()(((()))))))()(()(()))()()(()()))))))))((()))))))" \
        "(())((()((()))()))((((((()())))))(()((())((((()))))(()(()()()()(()))()()" \
        "(()(()))(()()(((((((()())(())(()())((())())()(()())((())()())())(()())))())))" \
        "(())())())(())((()())(((()()))()))()()))()(()(())((((((((())))()((())((()" \
        "((((((((((()))))(()(((((())(()(()())())))((())())))))()))(()((()()))((()((())" \
        "()()()((()(())())((())())(()()(((())))))())()()(()))()())(()(()((())))" \
        "((((()()(())))())(())(()(()(())())())(()()())()(())())))(()()(((())))" \
        "((()()(((())()()(()())((((()()(()())(()((((()(()()(()(()(((()((()())(()()))" \
        "(()((((()(((((()))))()()))(((()((((((()(()()()()())()))(()(())))))" \
        "((()(((()())())))(((()()))(()(()(((((((()()))(()(())))())()(())())(())" \
        "(()))(())(()))()()(()()())))))()))()((())(((()((((((((())()()))())))((()())("
    solution = Solution()
    ret = solution.longestValidParentheses(s)
    print(ret)

